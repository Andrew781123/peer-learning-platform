generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Subject {
  id         String         @id
  title      String         @db.VarChar(255)
  pastPapers PastPaper[]
  topics     SubjectTopic[]
}

model PastPaper {
  id           Int        @id @default(autoincrement())
  subject      Subject    @relation(fields: [subjectId], references: [id])
  subjectId    String
  link         String     @db.VarChar(255)
  academicYear String     @db.VarChar(255)
  questions    Question[]

  @@index([subjectId], name: "subjectId")
}

model Question {
  id          String             @id
  pastPaper   PastPaper          @relation(fields: [pastPaperId], references: [id])
  pastPaperId Int
  number      Int                @db.TinyInt
  solutions   QuestionSolution[]
  topics      QuestionTopic[]

  @@unique([pastPaperId, number], name: "pastPaperId_number_unique")
  @@index([pastPaperId], name: "pastPaperId")
}

model QuestionSolution {
  id                 String                 @id @default(cuid())
  question           Question               @relation(fields: [questionId], references: [id])
  questionId         String
  user               User                   @relation(fields: [userId], references: [id])
  userId             String
  markdown           String                 @db.Text
  difficultyRating   DifficultyRatingOption @relation(fields: [difficultyRatingId], references: [id])
  difficultyRatingId Int
  votes              SolutionVote[]
  comments           SolutionComment[]

  @@index([questionId], name: "questionId")
  @@index([userId], name: "userId")
  @@index([difficultyRatingId], name: "difficultyRatingId")
}

model SolutionVote {
  id         Int              @id @default(autoincrement())
  solution   QuestionSolution @relation(fields: [solutionId], references: [id])
  solutionId String
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  value      Int              @db.TinyInt

  @@unique([solutionId, userId], name: "solutionId_userId_unique")
  @@index([solutionId], name: "solutionId")
  @@index([userId], name: "userId")
}

model SolutionComment {
  id         Int              @id @default(autoincrement())
  solution   QuestionSolution @relation(fields: [solutionId], references: [id])
  solutionId String
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  markdown   String           @db.Text

  @@index([solutionId], name: "solutionId")
  @@index([userId], name: "userId")
}

model SubjectTopic {
  id        Int             @id @default(autoincrement())
  subject   Subject         @relation(fields: [subjectId], references: [id])
  subjectId String
  questions QuestionTopic[]
  name      String          @db.VarChar(255)

  @@index([subjectId], name: "subjectId")
}

model QuestionTopic {
  id         Int          @id @default(autoincrement())
  question   Question     @relation(fields: [questionId], references: [id])
  questionId String
  topic      SubjectTopic @relation(fields: [topicId], references: [id])
  topicId    Int

  @@index([questionId], name: "questionId")
  @@index([topicId], name: "topicId")
}

model DifficultyRatingOption {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(255)
  value             Int                @db.TinyInt
  questionSolutions QuestionSolution[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model User {
  id               String             @id @default(cuid())
  name             String             @default("Student")
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  questionSolution QuestionSolution[]
  solutionComments SolutionComment[]
  solutionVotes    SolutionVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
